---
import { contentfulClient } from "../../lib/contentful";
import MainLayout from "../../layouts/authenticated.astro"
import { Button, Chip, Link } from "@nextui-org/react";
import type { Unit } from "../../type/content-blocks";
import { IconChip } from "../../elements/IconChip";
import { IconHeader } from "../../elements/IconHeader";
import { AddToLibraryButton } from "../../elements/AddToLibraryButton";
import { ShareButton } from "../../elements/ShareButton";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import styles from './_unit.module.scss';
import {faScroll,
        faBookBlank,
        faPresentationScreen,
        faStar,
        faSeedling,
        faSignal4,
        faSquareCheck } 
        from '@fortawesome/pro-light-svg-icons';

import SyllabusLesson from "../../components/syllabus/syllabus-lesson"

export async function getStaticPaths() {
  const units = await contentfulClient.getEntries<Unit>({
  		content_type: "unit",
	});

  let unitsToPublish = [];

  units.items.map((unit) => {
    unitsToPublish.push({
      params: {unit: unit.sys.id},
      props: unit
    });
  });

  return unitsToPublish;
}

const {
  unit_description,
  unit_title,
  unit_learning_outcomes,
  unit_concept,
  unit_image,
  Unit_essential_questions,
  unit_prerequisite,
  unit_lessons,
} = Astro.props.fields;

const id = Astro.props.sys.id;
console.log(id);
// Get the first lesson's ID if available
const firstLessonId = unit_lessons && unit_lessons.length > 0 ? unit_lessons[0].sys.id : null;

// Helper function to get the URL - need to globalize
const getImageUrl = (image) => {
  if (image && image.fields && image.fields.file && image.fields.file.url) {
    const url = image.fields.file.url;
    return url.startsWith('//') ? `https:${url}` : url;
  }
  return 'https://placehold.co/425x265';
};

// Get the URL
const unitImageUrl = getImageUrl(unit_image);

---

<MainLayout title={unit_title}>
  <div class="grid grid-cols-12 gap-20">
    <div class="col-span-7 pb-32">
      <div class="mb-4">
        <IconChip icon={faBookBlank} label="Unit" contentType="unit" href="/units" />
      </div>
      <h1 class="text-4xl font-bold mb-2">{unit_title}</h1>
      <div class="text-md mb-4" set:html={documentToHtmlString(unit_description)}></div>
      {unit_concept && unit_concept.length > 0 && (
        <div class="mb-4">
          {unit_concept.map((concept, index) => {
            if (concept.fields && concept.fields.concept_name) {
              return (<Chip key={index} variant="flat" className="mb-3 mr-3">{concept.fields.concept_name}</Chip>);
            }
          })} 
        </div>
      )}

      <div class="flex gap-6 mb-6 items-center">
        <div class="flex flex-row font-bold items-center"><FontAwesomeIcon className="w-4 mr-1" icon={faSignal4} />Beginner</div>
        <div class="flex flex-row font-bold items-center"><FontAwesomeIcon className="w-5 mr-2" icon={faScroll} />
          {unit_lessons && unit_lessons.length !== undefined 
            ? `${unit_lessons.length} ${unit_lessons.length === 1 ? "Lesson" : "Lessons"}` 
            : "No Lessons"}
        </div>
      </div>

      <div class={`flex flex-row gap-4 mb-16 items-center ${styles.unitActions}`}>
        <Button
          href={firstLessonId ? `/lessons/${firstLessonId}` : '#'}
          as={Link}
          color="primary"
          variant="solid"
          className="font-bold w-32"
          isExternal
          aria-label="Start Unit"
        >
          <FontAwesomeIcon icon={faPresentationScreen} class="text-sm" />
          Start Unit
        </Button>
        <AddToLibraryButton type="unit" href={`${id}`} client:load />
        <ShareButton type="unit" href={`${id}`} client:load />
      </div>


      {unit_learning_outcomes && unit_learning_outcomes.content.length > 0 && (
        <div class="mb-16">
          <IconHeader headerId="learningOutcomes" icon={faSeedling} label="Learning Outcomes" />
          <h4 class="text-md font-bold pl-10 mb-2">Upon completion of this Unit, students will be able to:</h4>
          <ul class="list-disc list-outside ml-10 pl-4">
            {unit_learning_outcomes.content.map((outcome, index) => (
              outcome.nodeType === 'unordered-list' && outcome.content.map((item, idx) => (
                <li class="pb-3" key={idx}>{item.content[0].content[0].value}</li>
              ))
            ))}
          </ul>
        </div>
      )}
      
      {Unit_essential_questions && Unit_essential_questions.length > 0 && (
        <div class="mb-16">
          <IconHeader headerId="essentialQuestions" icon={faStar} label="Essential Questions" />
          <ol class="list-decimal list-outside ml-10 pl-4">
            {Unit_essential_questions.map((question, index) => (
              <li class="pb-3" key={index}>{ question.fields?.question || "No question available" }</li>
            ))}
          </ol>
        </div>
      )}

      <!-- {unit_concept && unit_concept.length > 0 && (
        <div class="mb-16">
          <IconHeader headerId="conceptsCovered" icon={} label="Concepts Covered" />
          {unit_concept.map((concept, index) => {
            if (concept.fields && concept.fields.concept_name) {
              return (<Chip key={index} variant="flat" className="mb-3 mr-3">{concept.fields.concept_name}</Chip>);
            }
          })} 
        </div>
      )} -->

      {unit_prerequisite && unit_prerequisite.content.length > 0 && (
        <div class="mb-16">
          <IconHeader headerId="learningPrerequisites" icon={faSquareCheck} label="Prerequisites" />
          <ul class="list-disc list-outside ml-10 pl-4">
            {unit_prerequisite.content.map((prerequisite, index) => (
              prerequisite.nodeType === 'unordered-list' && prerequisite.content.map((item, idx) => (
                <li class="pb-3" key={idx}>{item.content[0].content[0].value}</li>
              ))
            ))}
          </ul>
        </div>
      )}

      <div class="mt-16 mb-16">
        <h2 id="syllabus" class="text-xl font-bold mb-2">
          Unit Syllabus
          ({unit_lessons && unit_lessons.length !== undefined 
            ? `${unit_lessons.length} ${unit_lessons.length === 1 ? "Lesson" : "Lessons"}` 
            : "No Lessons"})
        </h2>
        <p class="text-md">
          Below is a map of lessons in the order of suggested presentation. You will find a variety of introductory lessons that present a new concept
          for the first time, practice lessons that contain ear training, recognizing, and identifying a concept, and reinforcing lessons that include creating with, producing with, or performing a concept.
        </p>
      </div>

      {unit_lessons && unit_lessons.length > 0 && (
        <ul>
          {unit_lessons.map((lesson, index) => (
            <SyllabusLesson key={index} lesson={lesson} />
          ))}
        </ul>
      )}
    </div>
    <div class="col-span-5">
      <div class="self-start sticky top-24">
        <div class="border rounded-lg bg-white">
          <img src={unitImageUrl} alt="" class="rounded-t-lg w-full">
          <ul class="flex flex-col sticky top-20">
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#overview">Overview</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#learningOutcomes">Learning Outcomes</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#essentialQuestions">Essential Questions</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#learningPrerequisites">Prerequisites</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#conceptsCovered">Concepts Covered</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#conceptsCovered">Unit Syllabus</a></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>