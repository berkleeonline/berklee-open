---
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { Button, Chip, Link } from "@nextui-org/react";
import type { Lesson } from "../../type/content-blocks";
import { IconChip } from "../../elements/IconChip";
import { AddToLibraryButton } from "../../elements/AddToLibraryButton";
import { ShareButton } from "../../elements/ShareButton";
import MainLayout from "../../layouts/main.astro";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {faScroll, faPresentationScreen, faClock, faSignal4, faChalkboardUser, faFilePdf} from '@fortawesome/pro-light-svg-icons';
import SwiperCarousel from '../../components/carousel/carousel';
import { LessonTabs } from '../../components/tabs/lesson-tabs';
import styles from './_lesson.module.scss';

// API function to fetch entry by ID
const fetchEntryById = async (id) => {
  const entry = await contentfulClient.getEntry(id);
  return entry;
};

export async function getStaticPaths() {
  const lessons = await contentfulClient.getEntries({
    content_type: "lesson",
  });

  let lessonsToPublish = [];

  lessons.items.map((lesson) => {
    lessonsToPublish.push({
      params: { lesson: lesson.sys.id },
      props: lesson
    });
  });

  return lessonsToPublish;
}

// Fetch and resolve lesson sections
const fetchAndResolveSections = async (sections) => {
  const resolvedSections = await Promise.all(
    sections.map(async (section) => {
      if (section.fields?.interactiveContent?.sys?.id) {
        const interactiveContent = await fetchEntryById(section.fields.interactiveContent.sys.id);
        return {
          ...section,
          fields: {
            ...section.fields,
            interactiveContent: interactiveContent.fields?.slides || [], // Default to an empty array if undefined
          },
        };
      }
      return {
        ...section,
        fields: {
          ...section.fields,
          interactiveContent: [], // Ensure interactiveContent is at least an empty array
        },
      };
    })
  );
  return resolvedSections;
};

const {
  lesson_sel,
  lesson_extension,
  lesson_accessibility,
  lesson_title,
  lesson_summary,
  lesson_audience,
  lesson_step,
  lesson_outline,
  lesson_materials,
  lesson_essential_questions,
  lesson_repertoire,
  lesson_prep,
  lesson_sticking_points,
  lesson_evidence,
  lesson_duration,
  lesson_concepts,
  lesson_outcome,
  lesson_prerequisites,
  lesson_sections,
  lesson_image_carousel,
  lesson_post_materials,
  lesson_pdf,
} = Astro.props.fields;


// get the PDF URL from the lesson post materials
const getPdfUrl = (lessonPdf) => {
  if (lessonPdf && lessonPdf.fields && lessonPdf.fields.file && lessonPdf.fields.file.url) {
    const url = lessonPdf.fields.file.url;
    return url.startsWith('//') ? `https:${url}` : url;
  }
  return null;
};


const pdfUrl = getPdfUrl(lesson_pdf);

const id = Astro.props.sys.id;

const serializeForClient = (obj) => {
  if (obj === undefined) return null; // Handle undefined at the top level

  const seen = new WeakSet();
  const onlyData = (key, value) => {
    if (value === undefined) return null; // Handle undefined values
    if (typeof value === "object" && value !== null) {
      if (seen.has(value)) return null; // Avoid cyclic references
      seen.add(value);
      if (value instanceof Date) return value.toISOString();
      if (Array.isArray(value)) return value.map(item => onlyData('', item));
      return Object.fromEntries(Object.entries(value).map(([k, v]) => [k, onlyData(k, v)]));
    }
    if (typeof value === "function") return null; // Remove functions
    return value;
  };
  return JSON.parse(JSON.stringify(obj, onlyData));
};

const resolvedLessonSections = await fetchAndResolveSections(lesson_sections || []);

---
<a id="overview"></a>
<MainLayout title={lesson_title}>
  <div class="grid grid-cols-12 gap-4 -mr-6" style="background: url(https://assets.online.berklee.edu/berklee-open-placeholder/bop-rounded-blue-2.svg) no-repeat top right; background-size: 55%;">
    <div class="absolute top-0 right-0">
      <img src="" class="h-400" />
    </div>
    <div class="col-start-1 col-end-6">
      <div class="mb-4">
        <IconChip icon={faScroll} label="Lesson" contentType="lesson" href="/lessons" />
      </div>
      <div class="mb-16">
        <h1 class="text-4xl font-bold mb-4">{lesson_title}</h1>

        <div class="flex flex-row gap-4 mb-6 items-center">
          {lesson_audience && lesson_audience[0] && (
            <div class="flex flex-row font-bold items-center">
              <FontAwesomeIcon className="w-4 mr-1" icon={faSignal4} />
              {lesson_audience[0]}
            </div>
          )}
          {lesson_duration && lesson_duration[0] && (
            <div class="flex flex-row font-bold items-center">
              <FontAwesomeIcon className="w-4 mr-2" icon={faClock} />
              {lesson_duration[0]}
            </div>
          )}
          {lesson_step && lesson_step[0] && (
            <div class="flex flex-row font-bold items-center">
              <FontAwesomeIcon className="w-5 mr-2" icon={faChalkboardUser} />
              {lesson_step[0]}
            </div>
          )}
        </div>

        <div class="mb-5" set:html={documentToHtmlString(lesson_summary)}></div>

        {lesson_concepts && lesson_concepts.length > 0 && (
          <div class="flex gap-4 mb-6">
            {lesson_concepts.map((concept, index) => (
              <Chip key={index} variant="flat">{concept.fields.concept_name}</Chip>
            ))}
          </div>
        )}
        
        <div class={`flex flex-row gap-4 items-center ${styles.lessonActions}`}>
          <Button href={`/slideshows/${id}`} isExternal as={Link} color="primary" className="font-bold w-48" aria-label="Start Presentation">
            <FontAwesomeIcon icon={faPresentationScreen} class="text-sm" />
            Start Presentation
          </Button>
          <Button 
              href={pdfUrl} 
              as={Link}
              color="default" 
              isExternal 
              className="font-bold w-41 hover:bg-rose-100" 
              variant="bordered" 
              color="primary" 
              aria-label="Download as PDF"
            >
            <FontAwesomeIcon icon={faFilePdf} color="primary" className="text-sm" />
            Download Lesson Plan
          </Button>
          <AddToLibraryButton type="lesson" hrefId={`${id}`} client:load />
          <ShareButton type="lesson" hrefId={`${id}`} client:load />
        </div>
      </div>

      <LessonTabs 
        lesson_sel={serializeForClient(lesson_sel)}
        lesson_extension={serializeForClient(lesson_extension)}
        lesson_accessibility={serializeForClient(lesson_accessibility)}
        lesson_outcome={serializeForClient(lesson_outcome)}
        lesson_outline={serializeForClient(lesson_outline)}
        lesson_essential_questions={serializeForClient(lesson_essential_questions)}
        lesson_repertoire={serializeForClient(lesson_repertoire)}
        lesson_prep={serializeForClient(lesson_prep)}
        lesson_materials={serializeForClient(lesson_materials)}
        lesson_sticking_points={serializeForClient(lesson_sticking_points)}
        lesson_evidence={serializeForClient(lesson_evidence)}
        lesson_prerequisites={serializeForClient(lesson_prerequisites)}
        lesson_sections={serializeForClient(resolvedLessonSections)} 
        client:visible
      />
      

    </div>
    <div class="col-end-12 col-span-5 relative">
      <SwiperCarousel lessonImages={lesson_image_carousel} client:load />
      <div class="self-start sticky top-24 col-span-4">
        <div class="border rounded-lg bg-white">
          <ul class="flex flex-col sticky top-20">
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#overview">Overview</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonStandards">Standards and Competencies</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonPrerequisites">Prerequisites</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#learningOutcomes">Learning Outcomes</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonDefinitions">Definitions</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonMaterials">Materials</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonEssentialQuestions">Essential Questions</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonRepertoire">Repertoire</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonEvidence">Evidence of Learning</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonSticking">Sticking Points</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonAccessible">Accessible Strategies</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#lessonExtension">Extension Strategies</a></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
