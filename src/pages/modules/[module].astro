---
import { contentfulClient } from "../../lib/contentful";
import { calculateLevel } from "../../lib/calculateLevel";
import { calculateDuration } from "../../lib/calculateDuration";
import { Button, Tooltip } from "@nextui-org/react";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { Module } from "../../type/content-blocks";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IconChip } from "../../elements/IconChip";
import { IconHeader } from "../../elements/IconHeader";
import {faScroll,
        faBooks,
        faPresentationScreen, 
        faCompass, 
        faStar, 
        faHeart, 
        faTrafficCone, 
        faMusicMagnifyingGlass, 
        faMusic, 
        faFileArrowDown, 
        faClock, 
        faSeedling, 
        faShare, 
        faSignal4, 
        faChalkboard, 
        faChalkboardUser, 
        faSquareCheck } 
          from '@fortawesome/pro-light-svg-icons';

import MainLayout from "../../layouts/authenticated.astro"
import UnitCard from "../../components/cards/unit"
import styles from './module.module.scss';

export async function getStaticPaths() {
  const modules = await contentfulClient.getEntries<Module>({
  		content_type: "module",
	});

  let modulesToPublish = [];

  modules.items.forEach((module) => {
    modulesToPublish.push({
      params: {module: module.sys.id},
      props: module
    });
  });

  return modulesToPublish;
}

const {
  module_title,
  module_description,
  module_units = [],
  module_level = [],
  Module_essential_questions = [],
} = Astro.props.fields;

let level = '';

if (module_level.length > 0) {
  level = calculateLevel(module_level);
}

let lessons = [];
let lessonTime = [];
let outcomes = [];
let evidences = [];
let repertoires = [];

if (module_units.length > 0) {
  await Promise.all(module_units.map(async (unit) => {
    if (unit.fields.unit_lesson && Array.isArray(unit.fields.unit_lesson)) {
      await Promise.all(unit.fields.unit_lesson.map(async (lessonLink) => {
        const lessonEntry = await contentfulClient.getEntry(lessonLink.sys.id);

        lessons.push(lessonEntry);

        if (lessonEntry.fields.lesson_duration) {
          lessonTime.push(...lessonEntry.fields.lesson_duration);
        }

        if (lessonEntry?.fields?.lesson_outcome?.content) {
          lessonEntry.fields.lesson_outcome.content.forEach((outcome) => {
            outcome.content.forEach((item) => {
              if (item.content && item.content.length > 0) {
                outcomes.push(item.content[0].content[0].value);
              }
            });
          });
        }

        if (lessonEntry?.fields?.lesson_evidence?.content) {
          lessonEntry.fields.lesson_evidence.content.forEach((evidence) => {
            evidence.content.forEach((item) => {
              if (item.content && item.content.length > 0) {
                evidences.push(item.content[0].content[0].value);
              }
            });
          });
        }

        if (lessonEntry?.fields?.lesson_repertoire?.content) {
          lessonEntry.fields.lesson_repertoire.content.forEach((repertoire) => {
            repertoire.content.forEach((item) => {
              if (item.content && item.content.length > 0) {
                repertoires.push(item.content[0].content[0].value);
              }
            });
          });
        }
      }));
    }
  }));
}

if (lessonTime.length > 0) {
  lessonTime = calculateDuration(lessonTime);
}
---

<MainLayout title={module_title} cssClass=" via-white to-slate-white">
  <div class="grid grid-cols-12 gap-20">
    <div class="col-span-8">
      <div class="mb-4">
        <IconChip icon={faBooks} label="Module" contentType="module" href="/modules" />
      </div>
      <h1 class="text-5xl font-bold mb-6">{module_title}</h1>
      <div class="mb-5" set:html={documentToHtmlString(module_description)}></div>
      <div class="flex gap-4 mb-6">
        <div class="flex flex-row font-bold"><FontAwesomeIcon className="w-4 mr-1" icon={faSignal4} />{ level }</div>
        <div class="flex flex-row font-bold"><FontAwesomeIcon className="w-4 mr-2" icon={faClock} /> { lessonTime }</div>
      </div>

      <div class={`flex flex-row gap-4 mb-16 items-center ${styles.lessonActions}`}>
        <Button color="primary" className="font-bold w-36" aria-label="Start Module">
          <FontAwesomeIcon icon={faPresentationScreen} class="text-sm" />
          Start Module
        </Button>
        <Tooltip placement="bottom" content="Save to Library" color="default">
          <Button isIconOnly className="p-2" radius="full" variant="bordered" color="default" aria-label="Save to Library">
            <FontAwesomeIcon icon={faHeart} />
          </Button>
        </Tooltip>
        <Tooltip placement="bottom" content="Share Module" color="default">
          <Button isIconOnly className="p-2" radius="full" variant="bordered" color="default" aria-label="Share Module">
            <FontAwesomeIcon icon={faShare} />
          </Button>
        </Tooltip>
      </div>
      
      <div class="mb-12">
        <IconHeader headerId="learningOutcomes" icon={faSeedling} label="Learning Outcomes" />
        <h4 class="text-lg font-bold pl-10">Upon completion of this module, students will be able to:</h4>
        <ul class="list-disc list-outside ml-10 pl-4">
          { outcomes.map((outcome) => (
            <li class="mt-4">{ outcome }</li>
          ))}
        </ul>
      </div>
      <div class="mb-12">
        <IconHeader headerId="essentialQuestions" icon={faStar} label="Essential Questions" />
        <ul class="list-disc list-outside ml-10 pl-4">
          { Module_essential_questions.map((question, index) => (
            <li class="mt-4" key={index}>{ question.fields.question }</li>
          ))}
        </ul>
      </div>

      <div class="mb-12">
        <IconHeader headerId="unitsCovered" icon={} label="Units Covered" />
        <p class="mt-2 mb-8">Below is a variety of units covered within this modulem, varying from introductory activities that present a new concept for the first time, practice activities that contain ear training, recognizing, and identifying a concept, and reinforcing activities that include creating with, producing with or performing a concept.</p>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {module_units.map((unit, index) => (
            <UnitCard key={index} unit={unit} />
          ))}
        </div>
      </div>


      <!-- <div class="mb-12">
        <h2 id="lessons" class="text-xl font-bold">Lessons</h2>
        <ul>
          { lessons.map((lesson) => (
            <li class="mt-4">
              <a href={`/lessons/${lesson.sys.id}`}>{ lesson.fields.lesson_title }</a>
            </li>
          ))}
        </ul>
      </div> -->
    </div>
    <div class="col-span-4">
      <div class="self-start sticky top-24 col-span-4">
        <div class="border rounded-lg bg-white">
          <ul class="flex flex-col sticky top-40">
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#overview">Overview</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#learningOutcomes">Learning Outcomes</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#essentialQuestions">Essential Questions</a></li>
            <li><a class="p-2 px-4 block font-bold text-sm hover:underline" href="#unitsCovered">Units Covered</a></li>
          </ul>
        </div>
      </div>
    </div>
    
  </div>
</MainLayout>
